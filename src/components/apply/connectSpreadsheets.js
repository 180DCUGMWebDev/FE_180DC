import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
const moment = require("moment");

const creds = require("./googless.json");
export const connectSS = async (data, target, flush) => {
  // Connect to Spreadsheets
  let serviceAccountAuth = null;

  try {
    serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: creds.client_email,
      key: creds.private_key,
      scopes: [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.file",
      ],
    });
  } catch {
    console.log("I GOT", err);
    console.log("err accessing spreadsheet:", err);
    if (err.response) {
      console.log("Response details:", err.response.data); // Log response data
      console.log("Response status:", err.response.status); // Log response status
      console.log("Response headers:", err.response.headers); // Log response headers
    }
  }

  console.log("SERVICE", serviceAccountAuth);

  let doc = null;
  try {
    doc = new GoogleSpreadsheet("1x80ZS4CEWXlNfGSz27bwK1VvOOFALzmBqtz7aCo9-qI", serviceAccountAuth);
  } catch (error) {
    console.log("I GOT", error);
    console.log("err accessing spreadsheet:", error);
    console.error("Error:", error);
    if (error.response) {
      console.error("Response data:", error.response.data);
      console.error("Response status:", error.response.status);
      console.error("Response headers:", error.response.headers);
    } else if (error.message) {
      console.error("Error message:", error.message); // Check for file not found, etc.
    }
  }

  console.log(doc);

  try {
    await doc.loadInfo();
  } catch (error) {
    console.log("I GOT", error);
    console.log("err accessing spreadsheet:", error);
    console.error("Error:", error);
    if (error.response) {
      console.error("Response data:", error.response.data);
      console.error("Response status:", error.response.status);
      console.error("Response headers:", error.response.headers);
    } else if (error.message) {
      console.error("Error message:", error.message); // Check for file not found, etc.
    }
  }

  // const sheet = doc.sheetsByTitle[target];

  // if (target === "Applicants") uploadData(data, sheet);
  // else if (target === "Newsletter") uploadSubscribe(data, sheet);
  flush();
};

const uploadData = async (data, sheet) => {
  await sheet.addRow({
    timestamp: moment().startOf("second").format("YYYY-MM-DD HH:mm:ss").toString(),
    name: data[0].answer,
    position: data[1].answer,
    email: data[2].answer,
    phone: data[3].answer,
    entity_name: data[4].answer,
    entity_loc: data[5].answer,
    entity_social: data[6].answer,
    entity_background: data[7].answer,
    entity_length: data[8].answer,
    entity_size: data[9].answer,
    scope: data[10].answer,
    outcome: data[11].answer,
    info_source: data[12].answer,
  });
};

const uploadSubscribe = async (data, sheet) => {
  await sheet.addRow({
    timestamp: moment().startOf("second").format("YYYY-MM-DD HH:mm:ss").toString(),
    email: data,
  });
};
